# frozen_string_literal: true

require "matrix"

module Steersuite # :nodoc:
  SteersimResult = Struct.new(:filename, :object_type, :object_info,
                              :parameter, :agent_data) do
    def to_file(dirname)
      fn = File.join(dirname, "#{filename}.bin")
      SteersimBinHandler.new(fn, self).writebin
    end

    def self.from_file(filename)
      SteersimBinHandler.new(filename).readbin
    end
  end

  unless defined? TrajectoryList
    class TrajectoryList < Array # :nodoc:
      def rawdata
        flat_map(&:entries)
      end
    end

  end

  ##
  # A class to handle the binary file generated by SteerSim
  class SteersimBinHandler
    def initialize(filename, data = nil)
      @filename = filename
      @data = data
    end

    def readsection(data_format, file)
      size = file.read(4).unpack1("l")
      file.read(size * 4).unpack(data_format)
    end

    def writesection(data, data_format)
      size = data.size
      @file.write([size].pack("l"))
      @file.write(data.pack(data_format))
    end

    def readbin
      File.open(@filename, "rb") do |f|
        filename = File.basename(@filename, ".bin")
        object_type = readsection("l*", f)
        object_info = readsection("f*", f)
        parameter = readsection("f*", f)
        agent_loc = []
        agent_loc << readsection("f*", f) until f.eof?

        agent_data = agent_loc.map do |pos|
          traj = pos.each_slice(2).map(&:itself)
          TrajectoryList.new(traj)
        end

        @data = SteersimResult.new(filename, object_type, object_info,
                                   parameter, agent_data)
      end
    end

    def writebin
      @file = File.open(@filename, "wb")
      @file.seek(0)
      writesection(@data.object_type, "l*")
      writesection(@data.object_info, "f*")
      writesection(@data.parameter, "f*")
      @data.agent_data.each do |t|
        writesection(t.rawdata, "f*")
      end
      @file.close
    end
  end
  private_constant :SteersimBinHandler
end
